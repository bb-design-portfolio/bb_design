var app = angular.module('app', ['ui.router', 'ngAnimate', 'ngMaterial', 'ngMessages', 'smoothScroll']);

app.config(['$urlRouterProvider', '$stateProvider',
			function($urlRouterProvider, $stateProvider){

	$urlRouterProvider.otherwise('/');

	$stateProvider
		.state('/', {
			url					: "/",
			templateUrl : 'build/views/home/homeView.html'
		})
		.state('clay', {
			url					: "/clay",
			templateUrl : 'build/views/clay/clayMainView.html'
		})
		.state('double_vessel', {
			url					: "/clay/double_vessel",
			templateUrl : 'build/views/clay/pieces/double_vessel_View.html'
		})
		.state('ice_queen', {
			url					: "/clay/ice_queen",
			templateUrl : 'build/views/clay/pieces/ice_queen_View.html'
		})
		.state('itself_apart_together', {
			url					: "/clay/itself_apart_together",
			templateUrl : 'build/views/clay/pieces/itself_apart_together_View.html'
		})
		.state('something_in_the_waves', {
			url					: "/clay/something_in_the_waves",
			templateUrl : 'build/views/clay/pieces/something_in_the_waves_View.html'
		})
		.state('spiky_thing', {
			url					: "/clay/spiky_thing",
			templateUrl : 'build/views/clay/pieces/spiky_thing_View.html'
		})
		.state('steady_ripple', {
			url					: "/clay/steady_ripple",
			templateUrl : 'build/views/clay/pieces/steady_ripple_View.html'
		})
		.state('the_chapel', {
			url					: "/clay/the_chapel",
			templateUrl : 'build/views/clay/pieces/the_chapel_View.html'
		})
		.state('the_endeavor', {
			url					: "/clay/the_endeavor",
			templateUrl : 'build/views/clay/pieces/the_endeavor_View.html'
		})
		.state('the_oracle', {
			url					: "/clay/the_oracle",
			templateUrl : 'build/views/clay/pieces/the_oracle_View.html'
		})
		.state('the_promise', {
			url					: "/clay/the_promise",
			templateUrl : 'build/views/clay/pieces/the_promise_View.html'
		})
		.state('open_mouth', {
			url					: "/clay/open_mouth",
			templateUrl : 'build/views/clay/pieces/open_mouth_View.html'
		})
		.state('to_flow_above', {
			url					: "/clay/to_flow_above",
			templateUrl : 'build/views/clay/pieces/to_flow_above_View.html'
		})
		.state('to_run_through', {
			url					: "/clay/to_run_through",
			templateUrl : 'build/views/clay/pieces/to_run_through_View.html'
		})
		.state('to_stand_up', {
			url					: "/clay/to_stand_up",
			templateUrl : 'build/views/clay/pieces/to_stand_up_View.html'
		})
		.state('untitled_helix', {
			url					: "/clay/untitled_helix",
			templateUrl : 'build/views/clay/pieces/untitled_helix_View.html'
		})
		.state('chalk', {
			url					: "/chalk",
			templateUrl : 'build/views/chalk/chalkMainView.html'
		})
		.state('design', {
			url					: "/design",
			templateUrl : 'build/views/design/designMainView.html'
		})
		.state('summer13', {
			url					: "/design/summer13",
			templateUrl : 'build/views/design/projects/summer_13_View.html'
		})
		.state('fall15', {
			url					: "/design/fall15",
			templateUrl : 'build/views/design/projects/fall_15_View.html'
		})
		.state('spring16', {
			url					: "/design/spring16",
			templateUrl : 'build/views/design/projects/spring_16_View.html'
		})
		.state('about', {
			url					: "/about",
			templateUrl : 'build/views/about/aboutView.html'
		})
		.state('press', {
			url					: "/press",
			templateUrl : 'build/views/press/pressView.html'
		})
		.state('contact', {
			url					: "/contact",
			templateUrl : 'build/views/contact/contactView.html'
		});
}]);

app.controller('AppCtrl', ['$scope', function ($scope, $window) {

	console.log("Welcome to the portfolio site of Brooke Burnside, Ceramic Artist & Designer. This site was designed and developed by Will Barbee (will.clayton.barbee@gmail.com)");

}]);

app.controller('NavCtrl', function ($scope, $timeout, $mdSidenav, $log) {
    $scope.toggleLeft = buildDelayedToggler('left');
    $scope.isOpenLeft = function(){
      return $mdSidenav('left').isOpen();
    };
    /**
     * Supplies a function that will continue to operate until the
     * time is up.
     */
    function debounce(func, wait, context) {
      var timer;
      return function debounced() {
        var context = $scope,
            args = Array.prototype.slice.call(arguments);
        $timeout.cancel(timer);
        timer = $timeout(function() {
          timer = undefined;
          func.apply(context, args);
        }, wait || 10);
      };
    }
    /**
     * Build handler to open/close a SideNav; when animation finishes
     * report completion in console
     */
    function buildDelayedToggler(navID) {
      return debounce(function() {
        // Component lookup should always be available since we are not using `ng-if`
        $mdSidenav(navID)
          .toggle();
      }, 200);
    }
    function buildToggler(navID) {
      return function() {
        // Component lookup should always be available since we are not using `ng-if`
        $mdSidenav(navID)
          .toggle();
      };
    }
  })

  .controller('LeftCtrl', function ($scope, $timeout, $mdSidenav, $log) {
    $scope.close = function () {
      // Component lookup should always be available since we are not using `ng-if`
      $mdSidenav('left').close();
    };
  });


	///////MATERIAL DIALOG


	app.controller('DialogCtrl', function($scope, $mdDialog) {
	  $scope.openFromLeft = function() {
	    $mdDialog.show(
	      $mdDialog.alert()
	        .clickOutsideToClose(true)
	        .title('Somerville Film Center')
	        .textContent('Closing to the right!')
	        .ariaLabel('Left to right demo')
	        .ok('Close')
	        // You can specify either sting with query selector
	        .openFrom('#left')
	        // or an element
	        .closeTo(angular.element(document.querySelector('#right')))
	    );
	  };
	});

/*!
 *	 Angular Smooth Scroll (ngSmoothScroll)
 *	 Animates scrolling to elements, by David Oliveros.
 *
 *   Callback hooks contributed by Ben Armston https://github.com/benarmston
 *	 Easing support contributed by Willem Liu. https://github.com/willemliu
 *	 Easing functions forked from GaÃ«tan Renaudeau. https://gist.github.com/gre/1650294
 *	 Infinite loop bugs in iOS and Chrome (when zoomed) by Alex Guzman. https://github.com/alexguzman
 *	 Support for scrolling in custom containers by Joseph Matthias Goh. https://github.com/zephinzer
 *	 Influenced by Chris Ferdinandi
 *	 https://github.com/cferdinandi
 *
 *	 Version: 2.0.0
 * 	 License: MIT
 */

(function () {
	'use strict';

	var module = angular.module('smoothScroll', []);


	/**
	 * Smooth scrolls the window/div to the provided element.
	 *
	 * 20150713 EDIT - zephinzer
	 * 	Added new option - containerId to account for scrolling within a DIV
	 */
	var smoothScroll = function (element, options) {
		options = options || {};

		// Options
		var duration = options.duration || 800,
			offset = options.offset || 0,
			easing = options.easing || 'easeInOutQuart',
			callbackBefore = options.callbackBefore || function() {},
			callbackAfter = options.callbackAfter || function() {},
			container = document.getElementById(options.containerId) || null,
			containerPresent = (container != undefined && container != null);

		/**
		 * Retrieve current location
		 */
		var getScrollLocation = function() {
			if(containerPresent) {
				return container.scrollTop;
			} else {
				if(window.pageYOffset) {
					return window.pageYOffset;
				} else {
					return document.documentElement.scrollTop;
				}
			}
		};

		/**
		 * Calculate easing pattern.
		 *
		 * 20150713 edit - zephinzer
		 * - changed if-else to switch
		 * @see http://archive.oreilly.com/pub/a/server-administration/excerpts/even-faster-websites/writing-efficient-javascript.html
		 */
		var getEasingPattern = function(type, time) {
			switch(type) {
				case 'easeInQuad': 		return time * time; // accelerating from zero velocity
				case 'easeOutQuad': 	return time * (2 - time); // decelerating to zero velocity
				case 'easeInOutQuad': 	return time < 0.5 ? 2 * time * time : -1 + (4 - 2 * time) * time; // acceleration until halfway, then deceleration
				case 'easeInCubic': 	return time * time * time; // accelerating from zero velocity
				case 'easeOutCubic': 	return (--time) * time * time + 1; // decelerating to zero velocity
				case 'easeInOutCubic': 	return time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1; // acceleration until halfway, then deceleration
				case 'easeInQuart': 	return time * time * time * time; // accelerating from zero velocity
				case 'easeOutQuart': 	return 1 - (--time) * time * time * time; // decelerating to zero velocity
				case 'easeInOutQuart': 	return time < 0.5 ? 8 * time * time * time * time : 1 - 8 * (--time) * time * time * time; // acceleration until halfway, then deceleration
				case 'easeInQuint': 	return time * time * time * time * time; // accelerating from zero velocity
				case 'easeOutQuint': 	return 1 + (--time) * time * time * time * time; // decelerating to zero velocity
				case 'easeInOutQuint': 	return time < 0.5 ? 16 * time * time * time * time * time : 1 + 16 * (--time) * time * time * time * time; // acceleration until halfway, then deceleration
				default:				return time;
			}
		};

		/**
		 * Calculate how far to scroll
		 */
		var getEndLocation = function(element) {
			var location = 0;
			if (element.offsetParent) {
				do {
					location += element.offsetTop;
					element = element.offsetParent;
				} while (element);
			}
			location = Math.max(location - offset, 0);
			return location;
		};

		// Initialize the whole thing
		setTimeout( function() {
			var currentLocation = null,
				startLocation 	= getScrollLocation(),
				endLocation 	= getEndLocation(element),
				timeLapsed 		= 0,
				distance 		= endLocation - startLocation,
				percentage,
				position,
				scrollHeight,
				internalHeight;

			/**
			 * Stop the scrolling animation when the anchor is reached (or at the top/bottom of the page)
			 */
			var stopAnimation = function () {
				currentLocation = getScrollLocation();
				if(containerPresent) {
					scrollHeight = container.scrollHeight;
					internalHeight = container.clientHeight + currentLocation;
				} else {
					scrollHeight = document.body.scrollheight;
					internalHeight = window.innerHeight + currentLocation;
				}

				if (
					( // condition 1
						position == endLocation
					) ||
					( // condition 2
						currentLocation == endLocation
					) ||
					( // condition 3
						internalHeight >= scrollHeight
					)
				) { // stop
					clearInterval(runAnimation);
					callbackAfter(element);
				}
			};

			/**
			 * Scroll the page by an increment, and check if it's time to stop
			 */
			var animateScroll = function () {
				timeLapsed += 16;
				percentage = ( timeLapsed / duration );
				percentage = ( percentage > 1 ) ? 1 : percentage;
				position = startLocation + ( distance * getEasingPattern(easing, percentage) );
				if(containerPresent) {
					container.scrollTop = position;
				} else {
					window.scrollTo( 0, position );
				}
				stopAnimation();
			};

			callbackBefore(element);
			var runAnimation = setInterval(animateScroll, 16);
		}, 0);
	};


	// Expose the library in a factory
	//
	module.factory('smoothScroll', function() {
		return smoothScroll;
	});


	/**
	 * Scrolls the window to this element, optionally validating an expression
	 *
	 * 20150713 EDIT - zephinzer
	 * 	Added containerId to attributes for smooth scrolling within a DIV
	 */
	module.directive('smoothScroll', ['smoothScroll', function(smoothScroll) {
		return {
			restrict: 'A',
			scope: {
				callbackBefore: '&',
				callbackAfter: '&',
			},
			link: function($scope, $elem, $attrs) {
				if ( typeof $attrs.scrollIf === 'undefined' || $attrs.scrollIf === 'true' ) {
					setTimeout( function() {

						var callbackBefore = function(element) {
							if ( $attrs.callbackBefore ) {
								var exprHandler = $scope.callbackBefore({ element: element });
								if (typeof exprHandler === 'function') {
									exprHandler(element);
								}
							}
						};

						var callbackAfter = function(element) {
							if ( $attrs.callbackAfter ) {
								var exprHandler = $scope.callbackAfter({ element: element });
								if (typeof exprHandler === 'function') {
									exprHandler(element);
								}
							}
						};

						smoothScroll($elem[0], {
							duration: $attrs.duration,
							offset: $attrs.offset,
							easing: $attrs.easing,
							callbackBefore: callbackBefore,
							callbackAfter: callbackAfter,
							containerId: $attrs.containerId
						});
					}, 0);
				}
			}
		};
	}]);


	/**
	 * Scrolls to a specified element ID when this element is clicked
	 *
	 * 20150713 EDIT - zephinzer
	 * 	Added containerId to attributes for smooth scrolling within a DIV
	 */
	module.directive('scrollTo', ['smoothScroll', function(smoothScroll) {
		return {
			restrict: 'A',
			scope: {
				callbackBefore: '&',
				callbackAfter: '&',
			},
			link: function($scope, $elem, $attrs) {
				var targetElement;

				$elem.on('click', function(e) {
					e.preventDefault();

					targetElement = document.getElementById($attrs.scrollTo);
					if ( !targetElement ) return;

					var callbackBefore = function(element) {
						if ( $attrs.callbackBefore ) {
							var exprHandler = $scope.callbackBefore({element: element});
							if (typeof exprHandler === 'function') {
								exprHandler(element);
							}
						}
					};

					var callbackAfter = function(element) {
						if ( $attrs.callbackAfter ) {
							var exprHandler = $scope.callbackAfter({element: element});
							if (typeof exprHandler === 'function') {
								exprHandler(element);
							}
						}
					};

					smoothScroll(targetElement, {
						duration: $attrs.duration,
						offset: $attrs.offset,
						easing: $attrs.easing,
						callbackBefore: callbackBefore,
						callbackAfter: callbackAfter,
						containerId: $attrs.containerId
					});

					return false;
				});
			}
		};
	}]);

}());
